# to avoid breaking SCP transfers only apply .bashrc to interactive sessions
if tty -s; then


if [ -e "$HOME/.colors" ]; then
    source "$HOME/.colors"
fi
if [ -e "$HOME/.bash_aliases" ]; then
    source "$HOME/.bash_aliases"
fi
if [ -e "$HOME/.bash_mac" ]; then
    source "$HOME/.bash_mac"
    echo ".bash_mac loaded"
fi
if [ -e "$HOME/.bash_mac" ]; then
    source "$HOME/.bash_mac"
fi
if [ -e "$HOME/.ansiblerc" ]; then
    source "$HOME/.ansiblerc"
fi
if [ -e "$HOME/.fzf.bash" ]; then
    source "$HOME/.fzf.bash"
fi
# 
# azure --completion >> ~/.azure.completion
#
if [ -e "$HOME/.azure.completion" ]; then
    source "$HOME/.azure.completion"
fi

# set locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# common settings
# big hist file is good for lazy (or forgetful) admins
HISTFILESIZE=20000
HISTSIZE=20000
# add timestamps to history entries
HISTTIMEFORMAT="[ %d.%m.%y %T ] "
# no point in saving dupes
HISTCONTROL=ignoredups
PS1='[\u@\h \w]\$ '

if [ -d /opt/libressl/lib ]; then
    export LD_LIBRARY_PATH=/opt/libressl/lib
fi

if [ -d "${HOME}/bin" ]; then
    PATH=${HOME}/bin:$PATH
fi
if [ -d "${HOME}/.local/bin" ]; then
    PATH=${HOME}/.local/bin:$PATH
fi
if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi

# bin-scripts should be in either ~/opt or ~/github
if [ -d "${HOME}/opt/bin-scripts" ]; then
    PATH=${HOME}/opt/bin-scripts/laptop:$PATH
    PATH=${HOME}/opt/bin-scripts:$PATH
fi
if [ -d "${HOME}/github/bin-scripts" ]; then
    PATH=${HOME}/github/bin-scripts/laptop:$PATH
    PATH=${HOME}/github/bin-scripts:$PATH
fi

# if it exists, add ${HOME}/opt/bin to path 
if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi


# add local python bin dir to path on OSX if it exists
if [ -d "${HOME}/Library/Python/2.7/bin" ]; then
    PATH=${HOME}/Library/Python/2.7/bin:$PATH 
    echo "${HOME}/Library/Python/2.7/bin added"
fi

export PATH

if [ "$OSTYPE" == "freebsd11.0" ] || [ "$OSTYPE" == "freebsd10.1" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        echo "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "linux-gnu" ]; then
    if [ -x /usr/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        echo "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "darwin15" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        echo "Please consider installing 'most' or 'less'"
    fi
fi
export HISTFILESIZE HISTSIZE HISTTIMEFORMAT PS1
# some basic env variables
export VAGRANT_DEFAULT_PROVIDER=virtualbox
export EDITOR="vim"


if [ "$OSTYPE" == "cygwin" ]; then
    echo "Running in cygwin, brawe man."
    if ssh-add -L > /dev/null; then
        echo "SSH agent seems to be OK"
    else
        echo "Let me set up ssh agent for you sir"
        ssh-agent > .ssh_agent
        source .ssh_agent
        ssh-add
    fi
    
fi

# Add ssh-key to ssh-agent if this is one of the workstations
# I assume that ssh-agent is started by something else (like .xinitrc).
if (( SSH_AGENT_PID )); then
    if ssh-add -L > /dev/null; then
        echo "SSH key already loaded"
    else
        echo "Adding ssh key to ssh-agent"
        ssh-add
    fi
fi
# avoid breaking SCP
if [ "$SSH_TTY" -o "$DESKTOP_SESSION" -o "$OSTYPE" == "darwin15" ]; then
    echo ".bashrc loaded"
fi


if [ -e "$SSH_AUTH_SOCK" ]; then
    if [[ -e ~/.ssh/ssh_auth_sock ]]; then 
        echo "SSH_AUTH_SOCK is OK"
    else
        ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
    fi
fi



alias activatevenv="source venv/bin/activate"
if [ -e /usr/local/bin/docker-machine ]; then
    if docker-machine status test1| grep Running > /dev/null; then
        echo "Docker machine is running."
        alias denv="eval \"$(docker-machine env test1)\""
        alias dshell="docker run -ti fxlv/debian_wheezy:shellbox bash"
    else
        echo "Docker machine is not available, sir"
    fi
fi

# if there's ssh-when-up.py present, use that for SSHing
# however sometimes pure ssh is needed and for theses cases
# create an alias 'ssh_original' 
if type ssh-when-up.py > /dev/null 2> /dev/null; then
    if [ -e /bin/ssh ]; then
        full_ssh_path=/bin/ssh
    fi

    if [ -e /usr/bin/ssh ]; then 
        full_ssh_path=/usr/bin/ssh
    fi
    alias ssh_original=$full_ssh_path
    echo "Using ssh-when-up.py script instead of ssh"
    alias ssh="ssh-when-up.py"

fi

# setup golang environment
if type go > /dev/null 2> /dev/null; then
    export GOPATH=$HOME/golang
    if [ ! -e $GOPATH ]; then
        echo "Your GOPATH is missing, so I will create it"
        mkdir $GOPATH
    fi
    echo "Setting up \$GOPATH to $GOPATH"
fi

# install powerline:  pip install --user git+git://github.com/powerline/powerline
powerlinesh="/Users/fx/Library/Python/2.7/lib/python/site-packages/powerline/bindings/bash/powerline.sh"
powerlinesh_linux="./.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh"

if [ -e "$powerlinesh" ]; then
. /Users/fx/Library/Python/2.7/lib/python/site-packages/powerline/bindings/bash/powerline.sh
fi

if [ -e "$powerlinesh_linux" ]; then
    . $powerlinesh_linux
fi

# end of tty conditional
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
